#include <iostream>
#include <string>
#include <algorithm> // for transform
#include <limits>    // for numeric_limits

using namespace std;

// Book class
class Book {
private:
    string title;
    float price;
    int pageCount;
    string* authors;
    int numAuthors;

public:
    Book() {
        title = "";
        price = 0.0;
        pageCount = 0;
        authors = nullptr;
        numAuthors = 0;
    }

    ~Book() {
        delete[] authors;
    }

    void setTitle(string title) {
        this->title = title;
    }

    string getTitle() const {
        return title;
    }

    void setPrice(float price) {
        this->price = price;
    }

    float getPrice() const {
        return price;
    }

    void setPageCount(int pageCount) {
        this->pageCount = pageCount;
    }

    int getPageCount() const {
        return pageCount;
    }

    void addAuthor(string author) {
        string* temp = new string[numAuthors + 1];
        for (int i = 0; i < numAuthors; i++)
            temp[i] = authors[i];

        temp[numAuthors] = author;
        delete[] authors;
        authors = temp;
        numAuthors++;
    }

    void addMultipleAuthors() {
        int n;
        cout << "Enter number of authors: ";
        cin >> n;
        cin.ignore();
        for (int i = 0; i < n; ++i) {
            string a;
            cout << "Enter author " << i + 1 << ": ";
            getline(cin, a);
            addAuthor(a);
        }
    }

    string getAuthors() const {
        string authorList;
        for (int i = 0; i < numAuthors; i++) {
            authorList += authors[i];
            if (i < numAuthors - 1) authorList += ", ";
        }
        return authorList;
    }

    void showDetails() const {
        cout << "\nTitle: " << title
             << "\nAuthors: " << getAuthors()
             << "\nPrice: $" << price
             << "\nPage Count: " << pageCount << endl;
    }

    bool matchesAuthor(string name) const {
        for (int i = 0; i < numAuthors; i++) {
            string a = authors[i];
            transform(a.begin(), a.end(), a.begin(), ::tolower);
            transform(name.begin(), name.end(), name.begin(), ::tolower);
            if (a.find(name) != string::npos)
                return true;
        }
        return false;
    }

    bool matchesTitle(string name) const {
        string t = title;
        transform(t.begin(), t.end(), t.begin(), ::tolower);
        transform(name.begin(), name.end(), name.begin(), ::tolower);
        return t.find(name) != string::npos;
    }
};

// Functions
void addNewBook(Book* books, int& totalBooks) {
    if (totalBooks >= 100) {
        cout << "Book limit reached!\n";
        return;
    }

    cin.ignore();
    string title;
    float price;
    int pages;

    cout << "\nEnter title: ";
    getline(cin, title);
    cout << "Enter price: ";
    cin >> price;
    cout << "Enter page count: ";
    cin >> pages;

    books[totalBooks].setTitle(title);
    books[totalBooks].setPrice(price);
    books[totalBooks].setPageCount(pages);
    books[totalBooks].addMultipleAuthors();
    totalBooks++;
    cout << "Book added successfully.\n";
}

void displayAllBooks(Book* books, int totalBooks) {
    for (int i = 0; i < totalBooks; i++) {
        cout << "\nBook #" << i + 1;
        books[i].showDetails();
    }
}

void searchBook(Book* books, int totalBooks) {
    cin.ignore();
    string query;
    cout << "Enter title or author to search: ";
    getline(cin, query);
    bool found = false;
    for (int i = 0; i < totalBooks; i++) {
        if (books[i].matchesTitle(query) || books[i].matchesAuthor(query)) {
            books[i].showDetails();
            found = true;
        }
    }
    if (!found) cout << "No book found matching the search.\n";
}

void editBook(Book* books, int totalBooks) {
    cin.ignore();
    string title;
    cout << "Enter the title of the book to edit: ";
    getline(cin, title);

    for (int i = 0; i < totalBooks; i++) {
        if (books[i].matchesTitle(title)) {
            float price;
            int pages;
            cout << "Enter new price: ";
            cin >> price;
            cout << "Enter new page count: ";
            cin >> pages;
            books[i].setPrice(price);
            books[i].setPageCount(pages);
            cout << "Book updated.\n";
            return;
        }
    }
    cout << "Book not found.\n";
}

void deleteBook(Book* books, int& totalBooks) {
    cin.ignore();
    string title;
    cout << "Enter the title of the book to delete: ";
    getline(cin, title);

    for (int i = 0; i < totalBooks; i++) {
        if (books[i].matchesTitle(title)) {
            for (int j = i; j < totalBooks - 1; j++) {
                books[j] = books[j + 1];
            }
            totalBooks--;
            cout << "Book deleted.\n";
            return;
        }
    }
    cout << "Book not found.\n";
}

void showStatistics(Book* books, int totalBooks) {
    float totalPrice = 0;
    int maxPages = 0;
    string biggestBook = "N/A";

    for (int i = 0; i < totalBooks; i++) {
        totalPrice += books[i].getPrice();
        if (books[i].getPageCount() > maxPages) {
            maxPages = books[i].getPageCount();
            biggestBook = books[i].getTitle();
        }
    }

    cout << "\nðŸ“Š Statistics:\n";
    cout << "Total Books: " << totalBooks << endl;
    if (totalBooks > 0) {
        cout << "Average Price: $" << totalPrice / totalBooks << endl;
        cout << "Biggest Book: " << biggestBook << " (" << maxPages << " pages)\n";
    }
}

// Main menu
int main() {
    Book books[100];
    int totalBooks = 0;
    int choice;

    do {
        cout << "\nðŸ“š Book Management Menu:\n";
        cout << "1. Add New Book\n";
        cout << "2. Display All Books\n";
        cout << "3. Search Book (by Title or Author)\n";
        cout << "4. Edit Book\n";
        cout << "5. Delete Book\n";
        cout << "6. Show Statistics\n";
        cout << "0. Exit\n";
        cout << "Choose an option: ";
        cin >> choice;

        switch (choice) {
            case 1: addNewBook(books, totalBooks); break;
            case 2: displayAllBooks(books, totalBooks); break;
            case 3: searchBook(books, totalBooks); break;
            case 4: editBook(books, totalBooks); break;
            case 5: deleteBook(books, totalBooks); break;
            case 6: showStatistics(books, totalBooks); break;
            case 0: cout << "Exiting...\n"; break;
            default: cout << "Invalid option.\n";
        }

    } while (choice != 0);

    return 0;
}
